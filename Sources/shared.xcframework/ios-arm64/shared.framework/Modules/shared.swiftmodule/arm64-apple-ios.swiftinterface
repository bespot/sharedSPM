// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name shared
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import shared
#if compiler(>=5.3) && $RethrowsProtocol
#if $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence where Self.AsyncIterator == shared.SkieSwiftFlowIterator<Self.Element> {
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence where Self.AsyncIterator == shared.SkieSwiftFlowIterator<Self.Element> {
}
#endif
#endif
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = shared.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = shared.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = shared.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = shared.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = shared.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = shared.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = shared.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = shared.Skie_SuspendResult
      public enum Canceled {
        public typealias __Kotlin = shared.Skie_SuspendResult.Canceled
      }
      public enum Error {
        public typealias __Kotlin = shared.Skie_SuspendResult.Error
      }
      public enum Success {
        public typealias __Kotlin = shared.Skie_SuspendResult.Success
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = shared.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreRunnable
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = shared.Skie.KotlinxCoroutinesCore
  public enum Shared {
    public enum UseCase {
    }
    public enum Failure {
    }
    public enum OAuth2Credentials {
    }
    public enum Failure_ {
    }
    public enum AuthFailure {
    }
    public enum Recipe {
    }
    public enum Operation {
    }
  }
  public typealias com_bespot_antifraud__shared = shared.Skie.Shared
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = shared.Skie.KotlinxSerializationCore
  public enum Runtime {
    public enum QueryResult {
    }
    public enum TransacterBase {
    }
  }
  public typealias app_cash_sqldelight__runtime = shared.Skie.Runtime
  public enum NetworkContract {
    public enum OAuth2Credentials {
    }
    public enum Failure {
    }
  }
  public typealias com_bespot_antifraud__network_contract = shared.Skie.NetworkContract
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  #endif
  @objc deinit
  public typealias Element = T
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>, result: inout shared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>, result: inout shared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinSharedFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinStateFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  @objc deinit
}
#endif
extension shared.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: shared.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: shared.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: shared.SkieColdFlowIterator<E>) -> shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> shared.KotlinBoolean
  #endif
}
extension shared.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any shared.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension shared.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
extension shared.RuntimeQueryResult {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func await() async throws -> Any?
  #endif
}
extension shared.Skie.Runtime.QueryResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: shared.Skie.Runtime.QueryResult.__Sealed, b: shared.Skie.Runtime.QueryResult.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Runtime.QueryResult.__Sealed where __Sealed : shared.RuntimeQueryResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Runtime.QueryResult.__Sealed? where __Sealed : shared.RuntimeQueryResult
extension shared.Multiplatform_settings_coroutinesSuspendSettings {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func clear() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getBoolean(key: Swift.String, defaultValue: Swift.Bool) async throws -> shared.KotlinBoolean
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getBooleanOrNull(key: Swift.String) async throws -> shared.KotlinBoolean?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getDouble(key: Swift.String, defaultValue: Swift.Double) async throws -> shared.KotlinDouble
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getDoubleOrNull(key: Swift.String) async throws -> shared.KotlinDouble?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getFloat(key: Swift.String, defaultValue: Swift.Float) async throws -> shared.KotlinFloat
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getFloatOrNull(key: Swift.String) async throws -> shared.KotlinFloat?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getInt(key: Swift.String, defaultValue: Swift.Int32) async throws -> shared.KotlinInt
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getIntOrNull(key: Swift.String) async throws -> shared.KotlinInt?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getLong(key: Swift.String, defaultValue: Swift.Int64) async throws -> shared.KotlinLong
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getLongOrNull(key: Swift.String) async throws -> shared.KotlinLong?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getString(key: Swift.String, defaultValue: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getStringOrNull(key: Swift.String) async throws -> Swift.String?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasKey(key: Swift.String) async throws -> shared.KotlinBoolean
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func keys() async throws -> Swift.Set<Swift.String>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putBoolean(key: Swift.String, value: Swift.Bool) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putDouble(key: Swift.String, value: Swift.Double) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putFloat(key: Swift.String, value: Swift.Float) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putInt(key: Swift.String, value: Swift.Int32) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putLong(key: Swift.String, value: Swift.Int64) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func putString(key: Swift.String, value: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func remove(key: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func size() async throws -> shared.KotlinInt
  #endif
}
extension shared.Skie.Shared.UseCase {
  public struct __Suspend<P, R> where P : AnyObject, R : AnyObject {
    public let __kotlinObject: shared.UseCase<P, R>
    public init(_ __kotlinObject: shared.UseCase<P, R>)
  }
}
public func skie<P, R>(_ kotlinObject: shared.UseCase<P, R>) -> shared.Skie.Shared.UseCase.__Suspend<P, R> where P : AnyObject, R : AnyObject
extension shared.Skie.Shared.UseCase.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func execute(parameters: P?) async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(parameters: P?) async throws -> Any?
  #endif
}
extension shared.DeviceRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func registerDevice(device: shared.Device) async throws -> Any?
  #endif
}
extension shared.ChecksRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func sendChecks(results: [shared.CheckResult], deviceMetadata: [Swift.String : Swift.String]) async throws -> Any?
  #endif
}
extension shared.KonnectionKonnection {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getInfo() async throws -> shared.KonnectionConnectionInfo?
  #endif
}
extension shared.KonnectionIpResolver {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func get() async throws -> Swift.String?
  #endif
}
extension shared.CheckOperation {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func detect(triggeredBy: shared.TriggeredBy) async throws -> shared.CheckResult
  #endif
}
extension shared.RemoteDataSource {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func checks(checkResults: [shared.Network_contractCheckResult], metadata: [Swift.String : Swift.String]) async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func register(deviceData: [shared.KotlinPair<Foundation.NSString, Foundation.NSString>], metadata: [Swift.String : Swift.String]) async throws -> Any?
  #endif
}
extension shared.Network_contractApiService {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func check(checks: [shared.Network_contractCheckResult], metadata: [Swift.String : Swift.String]) async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func registerDevice(params: [shared.KotlinPair<Foundation.NSString, Foundation.NSString>], metadata: [Swift.String : Swift.String]) async throws -> Any?
  #endif
}
extension shared.RuntimeSuspendingTransacter {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func transaction(noEnclosing: Swift.Bool, body: any shared.KotlinSuspendFunction1) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func transactionWithResult(noEnclosing: Swift.Bool, bodyWithReturn: any shared.KotlinSuspendFunction1) async throws -> Any?
  #endif
}
extension shared.KotlinSuspendFunction1 {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(p1: Any?) async throws -> Any?
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
@frozen public enum CheckType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case mockLocationFlags
  case transportVpn
  case netCapabilityNotVpn
  case networkNameIsTun
  case networkNameIsUtun
  case networkNameIsPpp
  case networkNameIsPptp
  case networkNameIsTap
  case networkNameIsIpsec
  case networkInterfaceIsOther
  case rootClientLib
  case emulatorClientLib
  case multipleDisplays
  case multiplePackageNameInstalled
  case suspiciousProcMaps
  case internalDirConflicts
  case devMenuEnabled
  case appDebuggable
  case storeValidation
  case appSignature
  case vpnAppsDetected
  case mockLocAppsDetected
  case rootAppsDetected
  case jailbreakSuspiciousAppsPath
  case jailbreakSuspiciousSystemPaths
  case jailbreakDyldSuspiciousLibraries
  case jailbreakFridaDetection
  case jailbreakUriSchemesDetection
  case jailbreakSandbox
  case mirroringAppsDetected
  case emulatorAppsDetected
  case clonedAppsDetected
  case other
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__CheckType, result: inout shared.CheckType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__CheckType, result: inout shared.CheckType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__CheckType?) -> shared.CheckType
  public func _bridgeToObjectiveC() -> shared.__CheckType
  public typealias _ObjectiveCType = shared.__CheckType
  public static func == (a: shared.CheckType, b: shared.CheckType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.CheckType]
  public static var allCases: [shared.CheckType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.CheckType {
  public func toKotlinEnum() -> shared.__CheckType
}
extension shared.__CheckType {
  public func toSwiftEnum() -> shared.CheckType
}
@frozen public enum Action : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case block
  case limitAccess
  case monitor
  case notSafe
  case safe
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Action, result: inout shared.Action?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Action, result: inout shared.Action?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Action?) -> shared.Action
  public func _bridgeToObjectiveC() -> shared.__Action
  public typealias _ObjectiveCType = shared.__Action
  public static func == (a: shared.Action, b: shared.Action) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.Action]
  public static var allCases: [shared.Action] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.Action {
  public func toKotlinEnum() -> shared.__Action
}
extension shared.__Action {
  public func toSwiftEnum() -> shared.Action
}
@frozen public enum TriggeredBy : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case user
  case periodic
  case screenChanged
  case theInit
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__TriggeredBy, result: inout shared.TriggeredBy?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__TriggeredBy, result: inout shared.TriggeredBy?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__TriggeredBy?) -> shared.TriggeredBy
  public func _bridgeToObjectiveC() -> shared.__TriggeredBy
  public typealias _ObjectiveCType = shared.__TriggeredBy
  public static func == (a: shared.TriggeredBy, b: shared.TriggeredBy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.TriggeredBy]
  public static var allCases: [shared.TriggeredBy] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.TriggeredBy {
  public func toKotlinEnum() -> shared.__TriggeredBy
}
extension shared.__TriggeredBy {
  public func toSwiftEnum() -> shared.TriggeredBy
}
@frozen public enum AdvertisingIdType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case huawei
  case google
  case apple
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: shared.__AdvertisingIdType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__AdvertisingIdType, result: inout shared.AdvertisingIdType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__AdvertisingIdType, result: inout shared.AdvertisingIdType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__AdvertisingIdType?) -> shared.AdvertisingIdType
  public func _bridgeToObjectiveC() -> shared.__AdvertisingIdType
  public typealias _ObjectiveCType = shared.__AdvertisingIdType
  public typealias Companion = shared.__AdvertisingIdType.Companion
  public static func == (a: shared.AdvertisingIdType, b: shared.AdvertisingIdType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.AdvertisingIdType]
  public static var allCases: [shared.AdvertisingIdType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.AdvertisingIdType {
  public func toKotlinEnum() -> shared.__AdvertisingIdType
}
extension shared.__AdvertisingIdType {
  public func toSwiftEnum() -> shared.AdvertisingIdType
}
@frozen public enum OSType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case android
  case amazon
  case ios
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__OSType, result: inout shared.OSType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__OSType, result: inout shared.OSType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__OSType?) -> shared.OSType
  public func _bridgeToObjectiveC() -> shared.__OSType
  public typealias _ObjectiveCType = shared.__OSType
  public static func == (a: shared.OSType, b: shared.OSType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.OSType]
  public static var allCases: [shared.OSType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.OSType {
  public func toKotlinEnum() -> shared.__OSType
}
extension shared.__OSType {
  public func toSwiftEnum() -> shared.OSType
}
@frozen public enum KonnectionNetworkConnection : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case wifi
  case mobile
  case ethernet
  case bluetoothTethering
  case unknownConnectionType
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__KonnectionNetworkConnection, result: inout shared.KonnectionNetworkConnection?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__KonnectionNetworkConnection, result: inout shared.KonnectionNetworkConnection?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__KonnectionNetworkConnection?) -> shared.KonnectionNetworkConnection
  public func _bridgeToObjectiveC() -> shared.__KonnectionNetworkConnection
  public typealias _ObjectiveCType = shared.__KonnectionNetworkConnection
  public static func == (a: shared.KonnectionNetworkConnection, b: shared.KonnectionNetworkConnection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.KonnectionNetworkConnection]
  public static var allCases: [shared.KonnectionNetworkConnection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.KonnectionNetworkConnection {
  public func toKotlinEnum() -> shared.__KonnectionNetworkConnection
}
extension shared.__KonnectionNetworkConnection {
  public func toSwiftEnum() -> shared.KonnectionNetworkConnection
}
@frozen public enum NapierLogLevel : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case verbose
  case debug
  case info
  case warning
  case error
  case assert
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__NapierLogLevel, result: inout shared.NapierLogLevel?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__NapierLogLevel, result: inout shared.NapierLogLevel?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__NapierLogLevel?) -> shared.NapierLogLevel
  public func _bridgeToObjectiveC() -> shared.__NapierLogLevel
  public typealias _ObjectiveCType = shared.__NapierLogLevel
  public static func == (a: shared.NapierLogLevel, b: shared.NapierLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.NapierLogLevel]
  public static var allCases: [shared.NapierLogLevel] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.NapierLogLevel {
  public func toKotlinEnum() -> shared.__NapierLogLevel
}
extension shared.__NapierLogLevel {
  public func toSwiftEnum() -> shared.NapierLogLevel
}
extension shared.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(shared.Skie_SuspendResult.Canceled)
    case error(shared.Skie_SuspendResult.Error)
    case success(shared.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : shared.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : shared.Skie_SuspendResult
extension shared.Skie.Shared.Failure {
  @frozen public enum __Sealed : Swift.Hashable {
    case networkConnection(shared.Failure_.NetworkConnection)
    case noActiveApiKey(shared.Failure_.NoActiveApiKey)
    case noChecksAvailableFailure(shared.Failure_.NoChecksAvailableFailure)
    case noRecipeFoundFailure(shared.Failure_.NoRecipeFoundFailure)
    case notInitialized(shared.Failure_.NotInitialized)
    case serverError(shared.Failure_.ServerError)
    case unknownError(shared.Failure_.UnknownError)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.Failure.__Sealed, b: shared.Skie.Shared.Failure.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.Failure.__Sealed where __Sealed : shared.Failure_
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.Failure.__Sealed? where __Sealed : shared.Failure_
extension shared.Skie.Shared.Failure_ {
  @frozen public enum __Sealed : Swift.Hashable {
    case authFailure(shared.AuthFailure)
    case databaseError(shared.Failure.DatabaseError)
    case featureFailure(shared.Failure.FeatureFailure)
    case locationPermissionDenied(shared.Failure.LocationPermissionDenied)
    case locationServicesDisabled(shared.Failure.LocationServicesDisabled)
    case networkConnection(shared.Failure.NetworkConnection)
    case noLocationAvailable(shared.Failure.NoLocationAvailable)
    case notInitialized(shared.Failure.NotInitialized)
    case serverError(shared.Failure.ServerError)
    case unknownApiError(shared.Failure.UnknownApiError)
    case unknownError(shared.Failure.UnknownError)
    case operation(shared.Operation)
    case recipe(shared.Recipe)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.Failure_.__Sealed, b: shared.Skie.Shared.Failure_.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.Failure_.__Sealed where __Sealed : shared.Failure
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.Failure_.__Sealed? where __Sealed : shared.Failure
extension shared.Skie.Shared.OAuth2Credentials {
  @frozen public enum __Sealed : Swift.Hashable {
    case empty(shared.OAuth2Credentials.Empty)
    case full(shared.OAuth2Credentials.Full)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.OAuth2Credentials.__Sealed, b: shared.Skie.Shared.OAuth2Credentials.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.OAuth2Credentials.__Sealed where __Sealed : shared.OAuth2Credentials
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.OAuth2Credentials.__Sealed? where __Sealed : shared.OAuth2Credentials
extension shared.Skie.Shared.AuthFailure {
  @frozen public enum __Sealed : Swift.Hashable {
    case noActiveApiKey(shared.AuthFailure.NoActiveApiKey)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.AuthFailure.__Sealed, b: shared.Skie.Shared.AuthFailure.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.AuthFailure.__Sealed where __Sealed : shared.AuthFailure
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.AuthFailure.__Sealed? where __Sealed : shared.AuthFailure
extension shared.Skie.Shared.Recipe {
  @frozen public enum __Sealed : Swift.Hashable {
    case noChecksAvailableFailure(shared.Recipe.NoChecksAvailableFailure)
    case noRecipeFoundFailure(shared.Recipe.NoRecipeFoundFailure)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.Recipe.__Sealed, b: shared.Skie.Shared.Recipe.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.Recipe.__Sealed where __Sealed : shared.Recipe
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.Recipe.__Sealed? where __Sealed : shared.Recipe
extension shared.Skie.Shared.Operation {
  @frozen public enum __Sealed : Swift.Hashable {
    case cannotNavigateToProcMapsFailure(shared.Operation.CannotNavigateToProcMapsFailure)
    case emptyCheckConfigurationFailure(shared.Operation.EmptyCheckConfigurationFailure)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.Shared.Operation.__Sealed, b: shared.Skie.Shared.Operation.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Shared.Operation.__Sealed where __Sealed : shared.Operation
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Shared.Operation.__Sealed? where __Sealed : shared.Operation
extension shared.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(shared.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(shared.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(shared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(shared.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(shared.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : shared.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreSerialKind
extension shared.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : shared.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreSerializersModule
extension shared.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(shared.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(shared.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : shared.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_corePolymorphicKind
extension shared.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(shared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(shared.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(shared.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(shared.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(shared.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(shared.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(shared.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(shared.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(shared.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : shared.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_corePrimitiveKind
extension shared.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(shared.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(shared.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(shared.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(shared.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : shared.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreStructureKind
extension shared.Skie.Runtime.TransacterBase {
  @frozen public enum __Sealed {
    case suspendingTransacter(any shared.RuntimeSuspendingTransacter)
    case transacter(any shared.RuntimeTransacter)
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.Runtime.TransacterBase.__Sealed where __Sealed : shared.RuntimeTransacterBase
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.Runtime.TransacterBase.__Sealed? where __Sealed : shared.RuntimeTransacterBase
extension shared.Skie.NetworkContract.OAuth2Credentials {
  @frozen public enum __Sealed : Swift.Hashable {
    case empty(shared.Network_contractOAuth2Credentials.Empty)
    case fullCredentials(shared.Network_contractOAuth2Credentials.FullCredentials)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.NetworkContract.OAuth2Credentials.__Sealed, b: shared.Skie.NetworkContract.OAuth2Credentials.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.NetworkContract.OAuth2Credentials.__Sealed where __Sealed : shared.Network_contractOAuth2Credentials
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.NetworkContract.OAuth2Credentials.__Sealed? where __Sealed : shared.Network_contractOAuth2Credentials
extension shared.Skie.NetworkContract.Failure {
  @frozen public enum __Sealed : Swift.Hashable {
    case apiFailure(shared.Network_contractFailure.ApiFailure)
    case unknownFailure(shared.Network_contractFailure.UnknownFailure)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.NetworkContract.Failure.__Sealed, b: shared.Skie.NetworkContract.Failure.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.NetworkContract.Failure.__Sealed where __Sealed : shared.Network_contractFailure
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.NetworkContract.Failure.__Sealed? where __Sealed : shared.Network_contractFailure
extension ObjectiveC.NSObject {
  public func filterDeviceVersion() -> Any
}
extension Swift.Double {
  public func round(decimals: Swift.Int32) -> Swift.Double
}
public func getOSVersion() -> Swift.Float
public func toSDKFailure(failure: shared.Network_contractFailure) -> shared.Failure
extension shared.Skie.Runtime.QueryResult.__Sealed : Swift.Sendable {}
extension shared.CheckType : Swift.Sendable {}
extension shared.Action : Swift.Sendable {}
extension shared.TriggeredBy : Swift.Sendable {}
extension shared.AdvertisingIdType : Swift.Sendable {}
extension shared.OSType : Swift.Sendable {}
extension shared.KonnectionNetworkConnection : Swift.Sendable {}
extension shared.NapierLogLevel : Swift.Sendable {}
extension shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
